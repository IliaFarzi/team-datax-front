name: datax-deploy-frontend-prod

on:
  push:
    branches:
      - main
    paths:
      - "src/**"
      - "public/**"
      - ".github/workflows/datax-deploy-frontend-prod.yml"

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check existing .env files
        run: |
          ls -la
          if [ -f .env ]; then cat .env; fi
          if [ -f .env.local ]; then cat .env.local; fi
          if [ -f .env.production ]; then cat .env.production; fi
          if [ -f .env.development ]; then cat .env.development; fi
          if [ -f .env.dev ]; then cat .env.dev; fi

      - name: Remove existing .env files
        run: |
          rm -f .env .env.local .env.production .env.development .env.dev

      - name: Create .env.production file for build
        run: |
          echo "NEXT_PUBLIC_API_BASE_URL=${{ secrets.VPS_URL }}" > .env.production
          echo "NODE_ENV=production" >> .env.production
          echo "OPENROUTER_API_BASE=${{ secrets.OPENROUTER_API_BASE }}" >> .env.production
          echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" >> .env.production
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env.production
          echo "DATAX_MONGO_URI=${{ secrets.DATAX_MONGO_URI }}" >> .env.production
          echo "DATAX_MONGO_COLLECTION_NAME=${{ secrets.DATAX_MONGO_COLLECTION_NAME }}" >> .env.production
          echo "DATAX_MONGO_DB_NAME=${{ secrets.DATAX_MONGO_DB_NAME }}" >> .env.production
          echo "FRONTEND_URL=${{ secrets.PROD_FRONTEND_URL }}" >> .env.production
          echo "SESSION_SECRET_KEY=${{ secrets.SESSION_SECRET_KEY }}" >> .env.production
          echo "DATAX_MINIO_ACCESS_KEY=${{ secrets.DATAX_MINIO_ACCESS_KEY }}" >> .env.production
          echo "DATAX_MINIO_SECRET_KEY=${{ secrets.DATAX_MINIO_SECRET_KEY }}" >> .env.production
          echo "DATAX_MINIO_ENDPOINT=${{ secrets.DATAX_MINIO_ENDPOINT }}" >> .env.production
          echo "DATAX_MINIO_BUCKET_SHEETS=${{ secrets.DATAX_MINIO_BUCKET_SHEETS }}" >> .env.production
          echo "DATAX_MINIO_BUCKET_UPLOADS=${{ secrets.DATAX_MINIO_BUCKET_UPLOADS }}" >> .env.production
          echo "DATAX_MINIO_SECURE=${{ secrets.DATAX_MINIO_SECURE }}" >> .env.production
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env.production
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env.production
          echo "GOOGLE_TOKEN_URI=${{ secrets.GOOGLE_TOKEN_URI }}" >> .env.production
          echo "GOOGLE_AUTH_URI=${{ secrets.GOOGLE_AUTH_URI }}" >> .env.production
          echo "GOOGLE_AUTH_PROVIDER_X509_CERT_URL=${{ secrets.GOOGLE_AUTH_PROVIDER_X509_CERT_URL }}" >> .env.production
          echo "GOOGLE_PROJECT_ID=${{ secrets.GOOGLE_PROJECT_ID }}" >> .env.production
          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env.production
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env.production
          echo "MAIL_FROM=${{ secrets.MAIL_FROM }}" >> .env.production
          echo "MAIL_PORT=${{ secrets.MAIL_PORT }}" >> .env.production
          echo "MAIL_SERVER=${{ secrets.MAIL_SERVER }}" >> .env.production
          echo "MAIL_FROM_NAME=${{ secrets.MAIL_FROM_NAME }}" >> .env.production
          echo "MAIL_TLS=${{ secrets.MAIL_TLS }}" >> .env.production
          echo "MAIL_SSL=${{ secrets.MAIL_SSL }}" >> .env.production

      - name: Copy files to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PROD_VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          port: 32222
          key: ${{ secrets.PROD_VPS_PRIVATE_KEY }}
          source: "docker-compose.prod.yml"
          target: "/home/datax-frontend-prod"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/datax-frontend:prod
          build-args: |
            PORT=8050
          no-cache: true

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          port: 32222
          key: ${{ secrets.PROD_VPS_PRIVATE_KEY }}
          script: |
            cd /home/datax-frontend-prod
            echo "NEXT_PUBLIC_API_BASE_URL=${{ secrets.VPS_URL }}" > .env.datax-front
            echo "NODE_ENV=production" >> .env.datax-front
            echo "OPENROUTER_API_BASE=${{ secrets.OPENROUTER_API_BASE }}" >> .env.datax-front
            echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" >> .env.datax-front
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env.datax-front
            echo "DATAX_MONGO_URI=${{ secrets.DATAX_MONGO_URI }}" >> .env.datax-front
            echo "DATAX_MONGO_COLLECTION_NAME=${{ secrets.DATAX_MONGO_COLLECTION_NAME }}" >> .env.datax-front
            echo "DATAX_MONGO_DB_NAME=${{ secrets.DATAX_MONGO_DB_NAME }}" >> .env.datax-front
            echo "FRONTEND_URL=${{ secrets.PROD_FRONTEND_URL }}" >> .env.datax-front
            echo "SESSION_SECRET_KEY=${{ secrets.SESSION_SECRET_KEY }}" >> .env.datax-front
            echo "DATAX_MINIO_ACCESS_KEY=${{ secrets.DATAX_MINIO_ACCESS_KEY }}" >> .env.datax-front
            echo "DATAX_MINIO_SECRET_KEY=${{ secrets.DATAX_MINIO_SECRET_KEY }}" >> .env.datax-front
            echo "DATAX_MINIO_ENDPOINT=${{ secrets.DATAX_MINIO_ENDPOINT }}" >> .env.datax-front
            echo "DATAX_MINIO_BUCKET_SHEETS=${{ secrets.DATAX_MINIO_BUCKET_SHEETS }}" >> .env.datax-front
            echo "DATAX_MINIO_BUCKET_UPLOADS=${{ secrets.DATAX_MINIO_BUCKET_UPLOADS }}" >> .env.datax-front
            echo "DATAX_MINIO_SECURE=${{ secrets.DATAX_MINIO_SECURE }}" >> .env.datax-front
            echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env.datax-front
            echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env.datax-front
            echo "GOOGLE_TOKEN_URI=${{ secrets.GOOGLE_TOKEN_URI }}" >> .env.datax-front
            echo "GOOGLE_AUTH_URI=${{ secrets.GOOGLE_AUTH_URI }}" >> .env.datax-front
            echo "GOOGLE_AUTH_PROVIDER_X509_CERT_URL=${{ secrets.GOOGLE_AUTH_PROVIDER_X509_CERT_URL }}" >> .env.datax-front
            echo "GOOGLE_PROJECT_ID=${{ secrets.GOOGLE_PROJECT_ID }}" >> .env.datax-front
            echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env.datax-front
            echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env.datax-front
            echo "MAIL_FROM=${{ secrets.MAIL_FROM }}" >> .env.datax-front
            echo "MAIL_PORT=${{ secrets.MAIL_PORT }}" >> .env.datax-front
            echo "MAIL_SERVER=${{ secrets.MAIL_SERVER }}" >> .env.datax-front
            echo "MAIL_FROM_NAME=${{ secrets.MAIL_FROM_NAME }}" >> .env.datax-front
            echo "MAIL_TLS=${{ secrets.MAIL_TLS }}" >> .env.datax-front
            echo "MAIL_SSL=${{ secrets.MAIL_SSL }}" >> .env.datax-front

            CONFLICT_CONTAINER=$(docker ps -q --filter "publish=8050")
            if [ -n "$CONFLICT_CONTAINER" ]; then
              echo "Stopping and removing container(s) using port 8050..."
              docker rm -f $CONFLICT_CONTAINER || true
            fi

            docker rm -f datax-frontend-prod || true
            docker image prune -af || true
            docker compose -f docker-compose.prod.yml up -d --force-recreate --remove-orphans
