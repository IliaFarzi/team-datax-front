name: datax-deploy-frontend

on:
  push:
    branches:
      - main
    paths:
      - "src/**"
      - "public/**"
      - ".github/workflows/datax-deploy-frontend.yml"

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Copy files to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          port: 32222
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          source: "docker-compose.yml"
          target: "/home/datax-frontend"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/datax-frontend:latest
          build-args: |
            PORT=8050
  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          port: 32222
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          script: |
            cd /home/datax-frontend

            # Create .env.datax file with environment variables
            echo "OPENROUTER_API_BASE=${{ secrets.OPENROUTER_API_BASE }}" > .env.datax-front
            echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" >> .env.datax-front
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env.datax-front
            echo "DATAX_MONGO_URI=${{ secrets.DATAX_MONGO_URI }}" >> .env.datax-front
            echo "DATAX_MONGO_COLLECTION_NAME=${{ secrets.DATAX_MONGO_COLLECTION_NAME }}" >> .env.datax-front
            echo "DATAX_MONGO_DB_NAME=${{ secrets.DATAX_MONGO_DB_NAME }}" >> .env.datax-front
            echo "FRONTEND_URL=${{ secrets.FRONTEND_URL }}" >> .env.datax-front
            echo "SESSION_SECRET_KEY=${{ secrets.SESSION_SECRET_KEY }}" >> .env.datax-front
            echo "DATAX_MINIO_ACCESS_KEY=${{ secrets.DATAX_MINIO_ACCESS_KEY }}" >> .env.datax-front
            echo "DATAX_MINIO_SECRET_KEY=${{ secrets.DATAX_MINIO_SECRET_KEY }}" >> .env.datax-front
            echo "DATAX_MINIO_ENDPOINT=${{ secrets.DATAX_MINIO_ENDPOINT }}" >> .env.datax-front
            echo "DATAX_MINIO_BUCKET_SHEETS=${{ secrets.DATAX_MINIO_BUCKET_SHEETS }}" >> .env.datax-front
            echo "DATAX_MINIO_BUCKET_UPLOADS=${{ secrets.DATAX_MINIO_BUCKET_UPLOADS }}" >> .env.datax-front
            echo "DATAX_MINIO_SECURE=${{ secrets.DATAX_MINIO_SECURE }}" >> .env.datax-front
            echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env.datax-front
            echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env.datax-front
            echo "GOOGLE_TOKEN_URI=${{ secrets.GOOGLE_TOKEN_URI }}" >> .env.datax-front
            echo "GOOGLE_AUTH_URI=${{ secrets.GOOGLE_AUTH_URI }}" >> .env.datax-front
            echo "GOOGLE_AUTH_PROVIDER_X509_CERT_URL=${{ secrets.GOOGLE_AUTH_PROVIDER_X509_CERT_URL }}" >> .env.datax-front
            echo "GOOGLE_PROJECT_ID=${{ secrets.GOOGLE_PROJECT_ID }}" >> .env.datax-front
            # New Mail Config
            echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env.datax-front
            echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env.datax-front
            echo "MAIL_FROM=${{ secrets.MAIL_FROM }}" >> .env.datax-front
            echo "MAIL_PORT=${{ secrets.MAIL_PORT }}" >> .env.datax-front
            echo "MAIL_SERVER=${{ secrets.MAIL_SERVER }}" >> .env.datax-front
            echo "MAIL_FROM_NAME=${{ secrets.MAIL_FROM_NAME }}" >> .env.datax-front
            echo "MAIL_TLS=${{ secrets.MAIL_TLS }}" >> .env.datax-front
            echo "MAIL_SSL=${{ secrets.MAIL_SSL }}" >> .env.datax-front

            # Stop and remove old container if exists
            docker rm -f datax-frontend || true

            # Recreate services
            docker compose -f docker-compose.yml pull
            docker compose -f docker-compose.yml up -d

            echo "âœ… Deployment successful! Visit: http://62.60.198.4:8050"
